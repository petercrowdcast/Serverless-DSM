head     1.1;
branch   ;
access   ;
symbols  ;
locks    ;
comment  @# @;


1.1
date     96.01.07.09.09.30;  author pogilvie;  state Exp;
branches ;
next     ;


desc
@@



1.1
log
@Initial revision
@
text
@// file     : dsm.cc
// author   : Peter Ogilvie
// date     : 3/10/92
// notes    : This file contains the threads which make the system work.
//            The function init() is called by the dsm_region constructor.
#include <cthreads.h>
#include <message.h>
#include <mach.h>
#include <stdio.h>
#include <sys/exception.h>
#include "C_mach_interface.h"
#include "dsm_region.h"
#include "dsm_server/Dsm_msg.h"
#include "dsm_server/dsm_server.h"
#include <stream.h>
#include <builtin.h>

void handle_exception(vm_address_t addr);
any_t responder_thread(port_t server_port);


typedef struct {
    port_t old_exc_port;
    port_t clear_port;
    port_t exc_port;
} ports_t;

port_t server_port, handle_exc_port;

volatile boolean_t  pass_on = FALSE;
mutex_t             printing, alock;
condition_t          done;
int client_no;
ports_t ports;

extern "C" {
   boolean_t exc_server(msg_header_t*, msg_header_t*);
   kern_return_t catch_exception_raise(port_t,port_t, port_t, int, int, int);
   void mach_NeXT_exception(char *, int, int, int);
}

/* Listen on the exception port. */
any_t exc_thread(ports_t *port_p)
{
    kern_return_t   r;
    char           *msg_data[2][64];
    msg_header_t   *imsg = (msg_header_t *)msg_data[0],
                   *omsg = (msg_header_t *)msg_data[1];

      Cport_allocate(&handle_exc_port);
      Dsm_msg m(client_no, server_port, handle_exc_port);
      m.send_control(EXCEPTION_INIT);



    /* Wait for exceptions. */
    while (1) {
        imsg->msg_size = 64;
        imsg->msg_local_port = port_p->exc_port;
        Cmsg_receive(imsg);

            /* Give the message to the Mach exception server. */
            if (exc_server(imsg, omsg)) {
                /* Send the reply message that exc_serv gave us. */
      Cmsg_send(omsg);
            }
            else { /* exc_server refused to handle imsg. */
                mutex_lock(printing);
                printf("exc_server didn't like the message\n");
                mutex_unlock(printing);
                exit(2);
            }
        

        /* Pass the message to old exception handler, if necessary. */
        if (pass_on == TRUE) {    
            imsg->msg_remote_port = port_p->old_exc_port;
            imsg->msg_local_port = port_p->clear_port;
            Cmsg_send(imsg);
        }
    }
}

int write_flag;

/* 
 * catch_exception_raise() is called by exc_server().  The only
 * exception it can handle is EXC_BAD_ACCESS.  
 * This function is called by the Mach exc_server().
 */
kern_return_t catch_exception_raise(port_t exception_port, 
    port_t thread, port_t task, int exception, int code, int subcode)
{
  int prot;
  int page_index;
  vm_address_t bad_addr = (vm_address_t) subcode;
  dsm_region d;
  Dsm_msg m(client_no, server_port, handle_exc_port);

    if (exception == EXC_BAD_ACCESS && d.check_address(bad_addr)) {
        /* Handle the exception so that the program can continue. */
      

      page_index = d.get_page_index(bad_addr);
      if(write_flag) {
#ifdef DEBUG
         cout << "write fault on client " << client_no << " on page " <<
         page_index << "\n";
#endif
         m.get_page(WRITE_FAULT, page_index);
         d.protect_page(page_index, VM_PROT_ALL);
         if(m.get_request() == WRITE_PERM_GRANTED) {
#ifdef DEBUG
            cout << "client: " << client_no <<
            " Got write perm for a page I have\n";
#endif
         }
         else if(m.get_request() == WRITE_DATA_PROVIDED) {
#ifdef DEBUG
            cout << "Got a write page\n";
#endif
            d.copy_page(page_index, (vm_address_t) m.get_page_ptr());
         }
         else
            cout << "Got a bad request from server on write fault\n";
         
      }
      else {
#ifdef DEBUG
         cout << "read fault on client " << client_no << " on page " <<
         page_index << "\n";
#endif
         m.get_page(READ_FAULT, page_index);
         d.protect_page(page_index, VM_PROT_ALL);
         d.copy_page(page_index, (vm_address_t) m.get_page_ptr());
         d.protect_page(page_index, VM_PROT_READ);
      }
#ifdef DEBUG
      printf("bad address = 0x%x\n", subcode);
#endif
      
      return KERN_SUCCESS;
    }
    else { /* Pass the exception on to the old port. */
        pass_on = TRUE;
        mach_NeXT_exception("Forwarding exception", exception, 
            code, subcode);
        return KERN_FAILURE;  /* Couldn't handle this exception. */
    }
}

// thread responder_thread
// This thread receives requests from the server.
any_t responder_thread(port_t server_port)
{
   port_t respond_port;
   dsm_region region;
   unsigned page_index;
   vm_prot_t prot;

   Cport_allocate(&respond_port);

   Dsm_msg m(client_no, server_port, respond_port);

   m.send_control(RESPONDER_INIT);
   condition_signal(done);

#ifdef DEBUG
cout << "past the condition signal\n";
#endif

   while(1)
   {
      m.receive();
      m.set_rport(m.get_rport());

      page_index = m.get_page_no();

      switch(m.get_request())
      {
         case PAGE_INVALID:
#ifdef DEBUG
            cout << "Responder thread of client_no " << client_no
            << "  PAGE_INVALID on page " << page_index << "\n";
#endif
            m.send_control(INVALID_DONE);
            prot = VM_PROT_NONE;
         break;

         case READ_DATA_REQUESTED:
#ifdef DEBUG
            cout << "Responder thread of client_no " << client_no
            << " READ_DATA_REQUESTED on page " << page_index << "\n";
#endif
            prot = VM_PROT_READ;
            m.send_page(READ_DATA_PROVIDED, page_index,
            (vm_address_t *) region.get_page_address(page_index));
         break;

         case WRITE_DATA_REQUESTED:
#ifdef DEBUG
            cout << "Responder thread of client_no " << client_no
            << " WRITE_DATA_REQUESTED on page " << page_index << "\n";
#endif
            prot = VM_PROT_NONE;
            m.send_page(WRITE_DATA_PROVIDED, page_index,
            (vm_address_t *) region.get_page_address(page_index));

         break;
         
         default:  
            cout << "Responder thread got bad request\n";
            exit(-1);
      }
      region.protect_page(page_index, prot); // THIS MUST CHANGE!!!
   }

}


init(unsigned number_of_clients)
{
    int              i;
    int              *iptr, j;
    port_t           a_port;


    Cport_allocate(&a_port);
    
    printing = mutex_alloc();
    alock = mutex_alloc();
    done = condition_alloc();

// get the server and handle exception ports.

   Cnetname_lookup("dsm_server", &server_port);
   Dsm_msg client_no_msg(number_of_clients, server_port, a_port);
   client_no_msg.set_request(CLIENT_INIT);
   client_no_msg.set_page_no(0);
   client_no_msg.set_page(PAGE_NULL);
   client_no_msg.rpc();

   client_no = client_no_msg.get_client_no();


   Cport_allocate(&handle_exc_port);


    /* Save the old exception port for this task. */
    Ctask_get_exception_port(&(ports.old_exc_port));


    /* Create a new exception port for this task. */
    Cport_allocate(&(ports.exc_port));

    Ctask_set_exception_port((ports.exc_port));

    /* Fork the thread that listens to the exception port. */
    cthread_detach(cthread_fork((cthread_fn_t)exc_thread, (any_t)&ports));
    cthread_detach(cthread_fork((cthread_fn_t)responder_thread,
                   (any_t)server_port));

    ports.clear_port = Cthread_self();

    condition_wait(done, alock);
   

}

/*
   class    : dsm_region.h
   author   : Peter Ogilvie
   date     : 4/10/92
   notes    : This class manages the area of memory allocated to the dsm client
              which acts as the client's interface to distribued shared memory.
              Since all instance variables are class variables only one object
              exists per client.
*/


#ifndef DSM_REGION
#define DSM_REGION

#include <C_mach_interface.h>
#include <cthreads.h>

#define address_null  (vm_address_t) 0
#define page_int_size (vm_page_size/sizeof(int))   // Number of int in a page.

class dsm_region {
   friend any_t responder_thread(port_t);

   protected:

      static vm_address_t vmem;
      // Class variable which points to client's locally allocated memory.

      static unsigned page_count;
      // Class variable contains the number of pages in the distributed shared
      // memory.  Pages are indexed from 0 to page_count - 1.

      void dsm_init(unsigned pcount, unsigned number_of_clients);
      /*
         results  : Allocates client's local memory buffer.
         assumes  : 0 < pcount , 0 < number_of_clients <= MAX_CLIENTS
         notes    : MAX_CLIENTS is defined in dsm_server.h
      */
   
   public:

      dsm_region(unsigned pcount = 10, unsigned number_of_clients = 2);
      /*
         results  : When called the first time will allocate local memory for
                    for client's access to distributed shared memory.  The
                    number of pages allocated = pcount.
         assumes  : pcount > 0, 0 < number_of_clients < MAX_CLIENTS
         notes    : Task will terminate if memory allocation fails.  Memory
                    is allocated in units of pages, thus if pcount = 10 and
                    the page size is 8k 80k will be allocated.  Ten pages are
                    allocated by default if no argument is specified.
                    MAX_CLIENTS is defined in dsm_server.h
      */

      int* get_iptr();
      /*
         returns  : An integer pointer to vmem so that the client may change
                    the contens of the memory pointed to by vmem.
         assumes  : Nothing.
         notes    : Although the contents which vmem points to may be changed
                    as a result of this call the address which vmem points to
                    is protected.
      */

      boolean_t check_address(vm_address_t addr);
      /*
         returns  : TRUE if addr is within the managed address space.  FALSE
                    otherwise.
         assumes  : Nothing.
      */

      unsigned get_page_index(vm_address_t addr);
      /*
         returns  : The page index in which addr resides.
         assumes  : addr is within the bounds of the mananged address space.
      */

      vm_address_t get_page_address(unsigned page_index);
      /*
         returns  : The starting address of the page specified by page index.
         assumes  : 0 <= page_index < page_count
      */

      void copy_page(int page_index, vm_address_t page);
      /*
         results  : Physical copy of page is made to managed memory specified
                    by page_index.
         assumes  : 0 <= page_index < page_count
                    page is an area of memory which is the size of a machine
                    page.
      */

      void temp_copy(vm_address_t *temp, unsigned page_index);
      /* 
         results  :  A tempary copy of the page specified by page_index
                     is made to the memory pointed by temp.
         assumes  : 0 <= page_index < page_count
         notes    :  temp will tipically reside on a stack.
      */

      void protect_page(int page_index, vm_prot_t protection);
      /*
         results  : Page specifeid by page_index is given access protection
                    specified by protection.
         assumes  : 0 <= page_index < page_count
         notes    : protection is given by the following from <vm/vm_prot.h>
                    VM_PROT_READ    : read only permission
                    VM_PROT_WRITE   : read and write perission
                    VM_PROT_NONE    : No access allowed
      */

};

#endif
/*
   implementation : dsm_region.cc
   author         : Peter Ogilvie
   date           : 4/10/92
*/


#include "dsm_region.h"
#include <stream.h>



static vm_address_t vmem = address_null;
// Set vmem to NULL to can tell if mem has already been allocated.

extern int init(unsigned number_of_clients);

static unsigned page_count = 0;

void dsm_region::dsm_init(unsigned pcount, unsigned number_of_clients)
{
   Cvm_allocate(&vmem, vm_page_size * pcount);
   Cvm_protect(vmem, vm_page_size * pcount, VM_PROT_NONE);
   page_count = pcount;
   init(number_of_clients);
   
}
   

dsm_region::dsm_region(unsigned pcount = 10, unsigned number_of_clients = 2)
{
   if(!vmem)
      dsm_init(pcount, number_of_clients);

}

int* dsm_region::get_iptr()
{
   return (int *) vmem;

}


boolean_t dsm_region::check_address(vm_address_t addr)
{
   vm_address_t end_addr;
   
   end_addr = vmem + (vm_page_size * page_count);

   boolean_t result = (vmem <= addr) && (addr <= end_addr);

   if(result == FALSE) {
      printf("Address out of dsm range 0x%x\n",addr);
      printf("start of range is 0x%x\n",vmem);
      cout << "page count = " << page_count << "\n";
   }

   return result;
}

unsigned dsm_region::get_page_index(vm_address_t addr)
{
   vm_address_t offset = addr - vmem;

   unsigned page_index = offset / vm_page_size;

   return page_index;

   return page_index;
}

vm_address_t dsm_region::get_page_address(unsigned page_index)
{
   vm_address_t addr;

   addr = vmem + (vm_page_size * page_index);

   return addr;
}

void dsm_region::copy_page(int page_index, vm_address_t page)
{
   int *dest_page = (int *) get_page_address(page_index);
   int *source_page = (int *) page;
   
   for(int i = 0; i < vm_page_size / sizeof(int); i++)
      dest_page[i] = source_page[i];

   // Cvm_deallocate((vm_address_t) source_page, vm_page_size);
}

void dsm_region::temp_copy(vm_address_t *temp_buf, unsigned page_index)
{
   int *source_page = (int *) get_page_address(page_index);
   
   for(int i = 0; i < vm_page_size / sizeof(int); i++)
      temp_buf[i] = source_page[i];
   cout << "got to temp copy\n";
}

void dsm_region::protect_page(int page_index, vm_prot_t protection)
{
   vm_address_t addr = get_page_address(page_index);

   Cvm_protect(addr, vm_page_size, protection);
}


/*
dsm_server.h
   author   :  Peter Ogilvie
   date     :  3/1/92
   modified :  5/13/92 Changed MAX_CLIENTS for variable no of clients
*/

#ifndef DSM_SERVER
#define DSM_SERVER

#include <stdio.h>
#include <mach.h>
#include <mach_error.h>
#include <sys/message.h>
#include <servers/netname.h>
#define c_plusplus
#include <int.VQueue.h>
#include <C_mach_interface.h>


#define MAX_CLIENTS         8
#define DSM_PAGE_COUNT      390 // Big enough to 512 X 512 + a little extra
#define SERVER              0

// types of requests
#define CLIENT_INIT           0
#define EXCEPTION_INIT        1    
#define RESPONDER_INIT        2
#define READ_FAULT            3
#define WRITE_FAULT           4
#define WRITE_DATA_PROVIDED   5
#define CLIENT_DONE           6
#define PAGE_INVALID          7
#define WRITE_PERM_GRANTED    8
#define TEST                  9
#define READ_DATA_REQUESTED   10
#define WRITE_DATA_REQUESTED  11
#define READ_DATA_PROVIDED    12
#define INVALID_DONE          13
#define CLEAN_UP              14
#define INIT_DONE             15
#define WAIT_INIT             16
   

// page states
#define INIT                0
#define READ                1
#define WRITE               2
#define READ_WAIT           3
#define WRITE_WAIT          4


// Structure for the client table
typedef struct {
  port_t except_port;
  port_t respond_port;
}client_table_entry;


// Structure for page table
typedef struct {
  int       state;
  int        owner; 
  intVQueue      Q;
}page_table_entry;

// dsm_server functions

port_t dsm_init();
void do_client_init(port_t);
void do_read_fault(int the_page, int the_client);
void do_write_fault(int the_page, int the_client);
vm_address_t* page_to_address(int page);
void page_copy(int page_index, vm_address_t *source_page);


#endif

// dsm_server.cc
//    author   : Peter Ogilvie
//    date     : 3/1/92
//    notes    : This file contains the code for a centralized server
//               distributed memory management system. It is highly
//               simplified since it only manages one address space and
//               uses largely synchronous communication.

#include "dsm_server.h"
#include "Dsm_msg.h"
#include <stream.h>
#include <timer.h>

int client_no = 1;      //  Stands for the server itself.
client_table_entry client_table[MAX_CLIENTS +1];
page_table_entry   page_table[DSM_PAGE_COUNT];
vm_address_t       the_pages;


port_t        server_port;

main()
{
   int         the_client, number_of_clients, Q_len;
   intVQueue   done_Q(MAX_CLIENTS);
   intVQueue   wait_Q(MAX_CLIENTS);
   port_t      done_client;
   boolean_t   clean_up_flag = FALSE, init_count = 0;

   int count = 0;
   server_port = dsm_init();

   timer calc_time;

   Dsm_msg     done_msg(SERVER, PORT_NULL, server_port);
   Dsm_msg     wait_msg(SERVER, PORT_NULL, server_port);
   Dsm_msg     clean_up_msg(SERVER, PORT_NULL, server_port);
   Dsm_msg      m(SERVER, PORT_NULL, server_port);

cout << "server done init\n";
   while(1)
   {
#ifdef DEBUG
      printf("Server ready to receive\n");
#endif
      m.receive();

// Get the client number and check it.

      the_client = m.get_client_no();

      if(((the_client < 0) || (the_client > MAX_CLIENTS + 1))
           && (m.get_request() != CLIENT_INIT))
      {
         cout << "Invalid client no " << the_client << "\n";
         cout << "Request = " << m.get_request() << "\n";
         exit(-1);
      }



      switch(m.get_request())
      {
         case CLIENT_INIT    :
            number_of_clients = m.get_client_no();
            do_client_init(m.get_rport());
         break;
    
         case EXCEPTION_INIT :
#ifdef DEBUG
            cout << "Got exception init from client " << the_client << "\n";
#endif
            client_table[the_client].except_port = m.get_rport();
         break;

         case RESPONDER_INIT :
#ifdef DEBUG
            cout << "Got responder init from client " << the_client << "\n"; 
            cout << "responder's port is " << m.get_rport() << "\n";
#endif
            client_table[the_client].respond_port = m.get_rport();
         break;

         case READ_FAULT     :
            do_read_fault(m.get_page_no(), the_client);
         break;

         case WRITE_FAULT    :
            do_write_fault(m.get_page_no(), the_client);
         break;

         case TEST:
            cout << "Got a test message\n";
            m.send();
         break;

         case INIT_DONE :
#ifdef DEBUG
            cout << "Got init_done from client " << the_client << "\n";
#endif
            init_count++;
         break;

         case WAIT_INIT :
#ifdef DEBUG
            cout << "Got wait msg from client " << the_client << "\n";
#endif
            wait_Q.enq(m.get_rport());

            if(init_count == m.get_page_no())
            {
               calc_time.set(); // start calc timer when init done;
               while(!wait_Q.empty())
               {
                  wait_msg.send_control(INIT_DONE, wait_Q.deq());
               }
            }
         break;

         case CLIENT_DONE:
cout << "Got client done message from " << the_client << "\n";
            done_Q.enq(m.get_rport());
            Q_len = done_Q.length();

            if(Q_len == number_of_clients -1 || number_of_clients == 1)
               cout << "Calc time = "<< calc_time.get_elapsed_time() << "\n";

            if(Q_len == number_of_clients)
            {
               while(!done_Q.empty())
               {
                  done_client = done_Q.deq();
                  done_msg.send_control(CLIENT_DONE, done_client);
               }
               Cvm_deallocate(the_pages, vm_page_size * DSM_PAGE_COUNT);
               cout << "server done\n";
               exit(1);
            }  
            else if(Q_len == (number_of_clients -1) && clean_up_flag)
               clean_up_msg.send();
            
         break;
               
         case CLEAN_UP :
#ifdef DEBUG
            cout << "Got clean up message\n";
#endif
            if(done_Q.length() == (number_of_clients - 1))
            {
               clean_up_msg.set_rport(m.get_rport());
               clean_up_msg.set_request(CLEAN_UP);
               clean_up_msg.set_page_no(0);
               clean_up_msg.set_page(PAGE_NULL);
               clean_up_msg.send();
            }

            else if(!clean_up_flag)
            {
               clean_up_flag = TRUE;
               clean_up_msg.set_rport(m.get_rport());
               clean_up_msg.set_request(CLEAN_UP);
               clean_up_msg.set_page_no(0);
               clean_up_msg.set_page(PAGE_NULL);
            }
         break;
               
    
         default :
            cerr << "dsm_server bad request = "<< m.get_request() << "\n";
         exit(-1);
      }
   }
}

port_t dsm_init()
{
  port_t           server_port;
  kern_return_t    r;
  int              i, j;
  vm_address_t              *aptr;


// Allocate the pages.

  Cvm_allocate(&the_pages, vm_page_size * DSM_PAGE_COUNT);


// Initailize the client table
  for(i = 1; i < MAX_CLIENTS + 1; i++)  {
     client_table[i].except_port = PORT_NULL;
     client_table[i].respond_port = PORT_NULL;
   }

// Initailize the page table

  for(i = 0; i < DSM_PAGE_COUNT; i++) {
    page_table[i].state = INIT;
    page_table[i].owner = SERVER;
  } 

// Allocate a port for server communication.

  Cport_allocate(&server_port);
 
//  Load the pages with initial values for testing.
   for(i = 0; i < DSM_PAGE_COUNT; i++)
   {
     aptr = page_to_address(i);
     for(j = 0; j < PAGE_DATA_SIZE; j++)
        aptr[j] = (i + 1);
   }
  
// Register new port with net name server.

   Cnetname_check_in("dsm_server", server_port);


// Return new port so that server can receive on it.

  return server_port;
}



vm_address_t* page_to_address(int page)
{
  vm_address_t *addr;

  addr = (vm_address_t*) the_pages;

  addr = addr + (PAGE_DATA_SIZE * page);

  return addr;
}



void do_client_init(port_t remote_port)
{
   Dsm_msg  msg_xmt(client_no, remote_port, PORT_NULL);
   kern_return_t r;

   if(client_no >= MAX_CLIENTS + 1) {
      fprintf(stderr,"do_client_init() too many clients\n"); exit(-1);
   }

   msg_xmt.set_request(CLIENT_INIT);
   msg_xmt.set_page(PAGE_NULL);
              
   // Tell the client what number they are.
   msg_xmt.send();
#ifdef DEBUG
cout << "Got client init for client " << client_no << "\n";
#endif
   client_no++;
}
      

void do_read_fault(int the_page, int the_client)
{
   Dsm_msg msg_xmt(SERVER, client_table[the_client].except_port, server_port);
   int the_owner;
   port_t service_port;

   Cport_allocate(&service_port);
   Dsm_msg ser_msg(SERVER, PORT_NULL, service_port);
   
#ifdef DEBUG
printf("Got to do_read_fault page = %d from client %d\n", the_page, the_client);
#endif

   if((the_page >= 0) && (the_page < DSM_PAGE_COUNT))
   {
      msg_xmt.set_request(READ_FAULT);
      msg_xmt.set_page_no(the_page);
      msg_xmt.set_page(page_to_address(the_page));
      page_table[the_page].Q.enq(the_client);
      
      switch(page_table[the_page].state)
      {
         case INIT :   
         case READ :
            page_table[the_page].state = READ;
            msg_xmt.send();
         break;
     
         case WRITE :
            page_table[the_page].state = READ;
            the_owner = page_table[the_page].owner;

            ser_msg.get_page(READ_DATA_REQUESTED, the_page,
                             client_table[the_owner].respond_port);

            page_table[the_page].Q.enq(the_owner);

#ifdef DEBUG
            cout << "Write page owned by client " << the_owner
            << " with res port " << client_table[the_owner].respond_port <<
            " and exp port " << client_table[the_owner].except_port << "\n";
#endif

            page_copy(the_page, (vm_address_t *) ser_msg.get_page_ptr());
#ifdef DEBUG
            cout << "got page back from " << the_owner <<
            "with message " << msg_xmt.get_request() << "\n";

#endif
            msg_xmt.set_rport(client_table[the_client].except_port);
            msg_xmt.send();
         break;

         default :
            cerr << "do_read_fault() unk state\n";
            exit(-1);
      }
      
   }
   else {
     cerr << "do_read_fault() page index out of bounds\n";
     exit(-1);
   }

   Cport_deallocate(service_port);
}

void page_copy(int page_index, vm_address_t *source_page)
{
 vm_address_t *dest_page = page_to_address(page_index);
 int i;

  for(i = 0; i < PAGE_DATA_SIZE; i++)
     dest_page[i] = source_page[i];

     //source_page[0] = 57;

   // dealocate the page form the message.
   Cvm_deallocate(*source_page, vm_page_size);
}



void do_write_fault(int the_page, int the_client)
{
  Dsm_msg msg_xmt(SERVER, client_table[the_client].except_port, server_port);
  int read_client, a_client, client_has_data = FALSE;
  intVQueue *theQ;
  int old_owner, new_owner;

  port_t service_port;
  Cport_allocate(&service_port);
  Dsm_msg inval_msg(SERVER, PORT_NULL, service_port);


#ifdef DEBUG
cout << "do_write_fault called with client " <<
the_client << " page " << the_page << "\n"<< "the page state is "<<
page_table[the_page].state << "\n";
#endif

  if((the_page >= 0) && (the_page < DSM_PAGE_COUNT)) 
  {
     switch(page_table[the_page].state)
     {
         case INIT: 
            page_table[the_page].owner = the_client;
            page_table[the_page].state = WRITE;
            msg_xmt.send_page(WRITE_DATA_PROVIDED, the_page,
                              page_to_address(the_page),
                              client_table[the_client].except_port);
         break;

         case WRITE: 
#ifdef DEBUG
            cout << "WRITE FAULT ON WRITE PAGE\n";
#endif
            old_owner = page_table[the_page].owner;
            new_owner = the_client;
            page_table[the_page].owner = new_owner;

            inval_msg.get_page(WRITE_DATA_REQUESTED, the_page,
                             client_table[old_owner].respond_port);
            
            page_copy(the_page, (vm_address_t *) inval_msg.get_page_ptr());

            msg_xmt.send_page(WRITE_DATA_PROVIDED, the_page,
                              page_to_address(the_page),
                              client_table[the_client].except_port);

            break;

         case READ :
            theQ = &page_table[the_page].Q;
            page_table[the_page].state = WRITE;
            page_table[the_page].owner = the_client;

            while(!theQ->empty())
            {
               a_client = theQ->deq();
#ifdef DEBUG
               cout << "a_client = " << a_client << "\n";
#endif
               if(a_client == the_client)
                  client_has_data = TRUE;
               else
               {
#ifdef DEBUG
                  cout << "Sending page invalid msg to client "
                  << a_client << "\n";
#endif
                  inval_msg.wait_control(PAGE_INVALID,
                     the_page, client_table[a_client].respond_port);
               }
            }

            if(client_has_data)
            {
#ifdef DEBUG
               cout << "write perm granted\n";
#endif
               msg_xmt.send_control(WRITE_PERM_GRANTED, the_page, 
                                    client_table[the_client].except_port);
            }
            else
            {
#ifdef DEBUG
               cout << "Write data provided\n";
#endif
               msg_xmt.send_page(WRITE_DATA_PROVIDED, the_page,
                                 page_to_address(the_page),
                                 client_table[the_client].except_port);
            }
         break;


         default:
            cerr << "do_write_fault unk state\n";
            exit(-1);
         break;
     }
  }
  else
  {
    cerr << "do_write_fault page_index out of bounds\n";
    exit(-1);
  }

   Cport_deallocate(service_port);


}
// file     :  vmatrix.cc
// author   :  Peter Ogilvie
// date     :  5/30/92
// notes    :  This program tests the use of and performance of server-less
//             distributed shared memory. It is quite similar to the program of
//             the same name used to test the single server distributed shared
//             memory.


#include <stdio.h>
#include <cthreads.h>
#include <stdlib.h>
#include "dsm_region.h"
#include "dsm_server/dsm_server.h"
#include "dsm_server/Dsm_msg.h"
#include "mfloat.h"
#include <builtin.h>
#include <timer.h>

// function print_matrix()
// results  :  This function prints a matrix of floats to standard out pointed
//             to by m.  The size of the matrix is specified by size_x and
//             size_y.
// notes    :  This function is used for debugging.
void print_matrix(mfloat *m, int size_x, int size_y)
{
   int i, limit = size_x * size_y;
   
   for(i = 0; i < limit; i++)
   {
      if(i % size_x == 0)
         cout << "\n";
         
//    if(i % 100 == 0)
         cout << " " << m[i];
      
   }
   cout << "\n";
}

 
// function fill_easy()
// results  :  Fills the memory pointed to by m with sequential numbers.
//             the size of the matrix is determined by size_x and size_y.
// notes    :  The matrix used in this function is the first multiplicand.
//             It is filled with sequential numbers to make checking the
//             results simple, and size independent.  Also the use of
//             sequential numbers allows pages where problems occure to be
//             easily calculated.
void fill_easy(mfloat *m, int size_x, int size_y)
{
   int i;
   
   for(i = 0; i < size_x * size_y; i++)
      m[i] = i;
}

// function fill_zero()
// results  :  Fills the result area with zeros.
// notes    :  While not really required since new memory is automaticly
//             zero filled it was felt that this would simulate a broader
//             class of applications in which all memory required some initial
//             state.
void fill_zero(mfloat *m , int size_x, int size_y)
{
   for(int i = 0; i < size_x * size_y; i++)
      m[i] = 0.0;
}


// function fill_identity()
// results  : fills the square matrix pointed to by m with side size side
//            with the identity matrix.
// assumes  : Square matrix with side = side
void fill_identity(mfloat *m, int side)
{
   int i;
   
      for(i = 0; i < side * side; i++)
      {
         if(i % (side +1))
            m[i] = 0.0;    // changed form *m++
         else
            m[i] = 1.0;    // changed form *m++
      }
}
// function mult_matrix()
// results  : This function is a plain vanillia matrix multiply
void mult_matrix(mfloat *result, mfloat *a, int size_ax, int size_ay,
                         mfloat *b, int size_bx, int size_by)
{
   int i, j, limit, pos1, pos2;
   mfloat temp;
   
   limit = size_ax * size_ay;
   
   for(i = 0; i < limit; i++)
   {
      pos1 = i - (i % size_ax);
      pos2 = i % size_by;
      for(j = 0; j < size_by; j++)
      {
         result[i] = result[i] + (a[pos1] * b[pos2]);
         pos1++;
         pos2 += size_by;
      }
   }
}

// function pmult_matrix(), parallel matrix multiply.
// results  :  result = a * b where result, a, b are square matrices of
//             floats.  The portion of the calculation done is determined
//             by the parameters start and stop.  For the full matrix:
//             start = 0 stop = side_a * side_a.
// Assumes: Square matrix
void pmult_matrix(mfloat *result, mfloat *a, int side_a, 
                         mfloat *b, int side_b, 
                         int start, int stop)
{
   int i, j, pos1, pos2;
   
   
   for(i = start; i < stop; i++)
   {
      pos1 = i - (i % side_a);
      pos2 = i % side_b;
      for(j = 0; j < side_b; j++)
      {
         result[i] = result[i] + (a[pos1] * b[pos2]);
         pos1++;
         pos2 += side_b;
      }
   }
}
// function calc_pages()
// returns  :  The number of pages required hold the three floating point
//             matrices used in the program.  (Two for the source and one for
//             the result.) Where size is the number of elements in one side of
//             of a square matrix.
// assumes  :  size > 0
// notes    :  May allocate one more page than needed.

inline int calc_pages(int size)
{
   return (size * size * sizeof(mfloat)  * 3 /vm_page_size) + 1;
}

// function start_index
// returns  :  The starting index for use by pmult_matrix, where client_no
//             is the client number of this client, number_clients is the 
//             number of clients being used for this computation, and size
//             is the size of one side of the square matrix.

inline int start_index(int client_no, int number_clients, int size)
{
   return (client_no - 1) * size * size / number_clients;
}

// function stop_index
// returns  :  The ending index for use by pmult_matrix, where client_no
//             is the client number of this client, number_clients is the 
//             number of clients being used for this computation, and size
//             is the size of one side of the square matrix.

inline int stop_index(int client_no, int number_clients, int size)
{
   return client_no * size * size / number_clients;
}
int check_results(mfloat *m,int size)
{
   int i, limit = size * size;
   
   for(i = 0; i < limit; i++)
      if(float(m[i]) != i) {
         cerr << m[i] << " != " << i << "\n";
         return FALSE;
      } 
      
   return TRUE;
}

extern "C" int gethostname(char *, int);

// These variables are global so that the threads can access them they are
// defined in dsm.cc
extern int client_no;
extern port_t server_port;
   
main(int argc, char *argv[])
{
   char name[64];
   timer init_timer, check_timer;
   unsigned init_time, check_time;

// get the arguments from the command line.
   if(argc != 3) {
      cerr << "usage: vmatrix <number of clients> <size of squar matrix>\n";
      exit(-1);
   }
   int number_clients = atoi(argv[1]), size = atoi(argv[2]);
   
   
// pointers which point to the matrices
   mfloat *m, *x, *y;
   
   int elements = size * size;
   int *iptr;
   dsm_region  d(calc_pages(size), number_clients);
   double atime;

// Message to sent events to server for barrier events
   port_t  event_port;
   Cport_allocate(&event_port);
   Dsm_msg event_msg(client_no, server_port, event_port);


   
   gethostname(name,64);
   cout << "client " << client_no << " is on " << name << "\n";
   iptr = d.get_iptr();
   
   
// Set the pointer to the matrices to point to distributed shared memory.
   m = (mfloat *) iptr;
   x = m + elements;
   y = x + elements;

   int wait_count;
   
   init_timer.set();

// if there are three or more clients then client 1, 2, 3 do init else
// only client 1 does the init.
if(number_clients >= 3) {
   wait_count = 3;
   if(client_no == 1) // client 1 does the init
   {
      fill_easy(x, size, size);
      event_msg.send_control(INIT_DONE);
      init_time = init_timer.get_elapsed_time();
      cout << "Init time " << init_time << "msec\n";
   }
   else if(client_no == 2 ) 
   {
      fill_identity(y, size);
      event_msg.send_control(INIT_DONE);
      init_time = init_timer.get_elapsed_time();
      cout << "Init time " << init_time << "msec\n";
   }
   else if(client_no == 3 )
   {
      fill_zero(m, size, size);
      event_msg.send_control(INIT_DONE);
      init_time = init_timer.get_elapsed_time();
      cout << "Init time " << init_time << "msec\n";
   }
}
else
{
   wait_count = 1;
   if(client_no == 1)
   {
      fill_easy(x, size, size);
      fill_identity(y, size);
      fill_zero(m, size, size);
      event_msg.send_control(INIT_DONE);
      init_time = init_timer.get_elapsed_time();
      cout << "Init time " << init_time << "msec\n";
   }
}
   event_msg.wait_control(WAIT_INIT, wait_count , server_port);
   
// This is the calculation.
   pmult_matrix(m, x, size, y, size,
                start_index(client_no, number_clients, size),
                stop_index(client_no, number_clients, size));

      
   if(client_no == 1) // client1 checks the results
   {
      check_timer.set();
      event_msg.wait_control(CLEAN_UP);

      if(check_results(m, size))
         cerr << "\nmult worked\n";
      else
         cerr << "mult failed\n";
      
      check_time = check_timer.get_elapsed_time();

      cout << "Check time = " << check_time << "msec\n";
      //print_matrix(m, size, size);
   }

   event_msg.wait_control(CLIENT_DONE);


   cout  << "client " << client_no << " done.\n";
}
@
